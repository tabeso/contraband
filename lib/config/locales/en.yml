en:
  contraband:
    errors:
      messages:
        deferred_importer_missing:
          message: "DeferredImport is not defined."
          summary: "Asynchronous importing requires a DeferredImport model which
            handles storing and enqueuing jobs for processing."
          resolution: "Implement a DeferredImport model, or install the
            necessary extensions."
        finder_not_implemented:
          message: "%{klass}.find is not implemented."
          summary: "When calling %{klass}.find, it is expected that %{klass}
            overrides .find to return an instantiated resource for the provided
            identifier."
          resolution: "Implement %{klass}.find."
        import_deferred:
          message: "The import was deferred while processing data for %{klass}."
          summary: "When a related record cannot be found for association,
            the import is halted and enqueued for deferred execution."
          resolution: "You should never see this method unless you've overridden
            something. It's possible there is a bug in the gem. Please report
            issues at https://github.com/tabeso/contraband."
        uninferable_importer:
          message: "Could not infer importer class for %{service} from model
            class %{klass}."
          summary: "When calling %{klass}.importer_class(%{service}), it is
            expected that a class exists with the name %{expected} or
            %{klass}.importer_class has been overridden to return the
            correct class."
          resolution: "Ensure the importer exists and is loaded or the model
            has overridden .importer_class to return the correct class."
        uninferable_model:
          message: "Could not infer model class from importer class %{klass}."
          summary: "When calling %{klass}.model_class, it is expected that
            %{klass} is either named as <Service>Importer::<Model> or
            %{klass}.model_class has been overridden to return the
            correct class."
          resolution: "Ensure the importer either follows the naming convention
            or defines .model_class to return the correct class."
        uninferable_service:
          message: "Could not infer service from importer class %{klass}."
          summary: "When calling %{klass}.service, it is expected that %{klass}
            is either named as <Service>Importer::<Model> or %{klass}.service
            has been overridden to return the correct class."
          resolution: "Ensure the importer either follows the naming convention
            or defines .service to return the correct service."
